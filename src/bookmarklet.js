// Generated by CoffeeScript 1.3.1
(function() {
  var build_path_str, draw_data, draw_paper, draw_xy, init, limit, p, paper, path_padding, path_step, pp, ps, sh, sph, spv, stage_height, stage_padding_horiz, stage_padding_vert, stage_width, sw;

  if (!this.g_cpu_history) {
    return;
  }

  paper = null;

  spv = stage_padding_vert = 10;

  sph = stage_padding_horiz = 30;

  sw = stage_width = 575;

  sh = stage_height = 100;

  pp = path_padding = 10;

  ps = path_step = 5;

  p = null;

  limit = 100;

  draw_paper = function() {
    return paper = Raphael(10, 110, stage_width, stage_height);
  };

  draw_xy = function() {
    paper.rect(10, 10, sw, sh).attr({
      'fill': '#333'
    });
    return paper.path().attr({
      'path': "M" + sph + " " + spv + "L" + sph + " " + (sh - spv) + "L" + (sw - sph) + " " + (sh - spv),
      'stroke': 'white',
      'stroke-width': 2
    });
  };

  draw_data = function(data) {
    p || (p = paper.path());
    return p.attr({
      'path': build_path_str(data),
      'stroke': 'green',
      'stroke-width': 2,
      'stroke-linejoin': 'round'
    });
  };

  build_path_str = function(data) {
    var index, item, ret, _i, _len;
    ret = "";
    if (data.length > limit) {
      data = data.slice(data.length - limit);
    }
    for (index = _i = 0, _len = data.length; _i < _len; index = ++_i) {
      item = data[index];
      ret += "L" + (sph + pp + ps * index) + " " + (spv + pp + (100 - item) / 100 * (sh - spv * 2 - pp * 2));
    }
    return ret.replace('L', 'M');
  };

  init = function() {
    var _base;
    if (typeof (_base = this.g_cpu_history).init === "function") {
      _base.init();
    }
    draw_paper();
    draw_xy();
    return setInterval(function() {
      return draw_data(this.g_cpu_history.data);
    }, 100);
  };

  init();

}).call(this);
